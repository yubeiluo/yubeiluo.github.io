<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[A passionate coder, footballer and dreamer]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.yubeiluo.me//"/>
  <updated>2015-08-14T14:18:41.000Z</updated>
  <id>http://blog.yubeiluo.me//</id>
  
  <author>
    <name><![CDATA[David Yu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Lessons-Learned-Transition-to-Frontend]]></title>
    <link href="http://blog.yubeiluo.me/2015/08/14/Lessons-Learned-Transition-to-Frontend/"/>
    <id>http://blog.yubeiluo.me/2015/08/14/Lessons-Learned-Transition-to-Frontend/</id>
    <published>2015-08-14T12:09:15.000Z</published>
    <updated>2015-08-14T14:18:41.000Z</updated>
    <content type="html"><![CDATA[<p>It’s been almost a quarter since I joined the new team. For the recent month, all the efforts have been spent on the <strong>Mini ERP Project</strong> aiming to integrate internal workflows for increasing efficiency and boosting productivity. Proudly speaking, I have now transitioned to be a proficient front-end engineer within such a short period of time, so it is worth spending some more time in recording and more importantly summarizing the lessons learned in this unforgettable and challenging transition process.</p>
<h1 id="Facts_&amp;_Lessons">Facts &amp; Lessons</h1><ol>
<li><p>The first project is an existing one, developed by a seasoned front-end veteran, who was going to leave the team soon. The project was written in the <strong>MEAN</strong> stack using grunt as the build tool and helped enlighten me in various aspects of front-end engineering with enormous amount of working examples. The only cumbersome issue was that each time a new dependency was introduced, you had to manually wire them up in the main page, which obviously violates the <a href="https://en.wikipedia.org/wiki/Open/closed_principle" target="_blank" rel="external">OCP principle</a>. BTW, Java is my favorite programming language and I am obsessed with software design principles and practices with over 4 years experience of server side engineering, 1 year hands-on architectural experience.</p>
</li>
<li><p>As was told by many friends, Angular indeed has a very steep learning curve compared to other frameworks and it took me no less than two weeks before the angular way of thinking came into being in my mentality. However, once you get used to it, the previous pains totally paid off because you now have a damn powerful weapon added to your arsenal, which could help to solve many intricate problems in many cases with less code written. The core angular concepts are:</p>
<ul>
<li>Two-way data binding</li>
<li>Dependency injection,</li>
<li>Controllers</li>
<li>Services</li>
<li>Service providers</li>
<li>Scope and scope inheritance</li>
<li>Filters</li>
</ul>
<p>It is worth pointing out that you can not claim to be an Angular artisan unless you comprehend the inner workings of the directives and are capable of rolling out customized ones to suite your own use case.</p>
</li>
<li><p>GulpJs is a better build tool compared to GruntJs because of the following two reasons:</p>
<ul>
<li>It favors the concept of “coding over configuration”, which makes the code feel more explicit and readable, thus much easier for you to figure out what is going on.</li>
<li>It out-performs GruntJs by working in a streaming manner just like Unix pipes. In GulpJs, almost everything is performed in memory and no intermediary file storage is required, thus saving tremendous amount of disk-io related time.</li>
</ul>
</li>
<li><p><a href="https://github.com/Swiip/generator-gulp-angular" target="_blank" rel="external">Angular+GulpJs generator</a> is awesome in that you do not feel the hassle of wiring up dependencies manually in the main page any more since they are sorted out by the <a href="https://github.com/klei/gulp-angular-filesort" target="_blank" rel="external">angular-file-sort plugin</a>.</p>
</li>
<li><p>You should start way much earlier to experiment and prototype before the backend team kicks off and definitely do not wait until the backend API is ready. Nodejs + express could be leveraged to mock the real api and provide some fake data in order to make the whole workflow run.</p>
</li>
<li><p>Usability is important and you should always think from the perspective of the end users and make bold suggestions when necessary. Take the below comparison as an example:</p>
<ul>
<li><p>The origin detail page design</p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-5.png" alt=""></p>
</li>
<li><p>The proposed design</p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-4.png" alt=""></p>
<p>As you can see, since the detail page is very lengthy, it will be very handy for an left-side navigation bar to be present when users are scrolling around.</p>
</li>
</ul>
</li>
<li><p>You should have a consistent error handling process in place to make troubleshooting a straightforward and time-saving task when something goes wrong.</p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-6.png" alt=""></p>
</li>
</ol>
<h1 id="Finished_Product">Finished Product</h1><p>Although the product is far from being perfect, I still would like to show off some highlights.</p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-4.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-7.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-8.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-9.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-10.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-11.png" alt=""></p>
<h1 id="Conclusion">Conclusion</h1><p>It will be great if this long post will be of any use for other backend engineers who also feel tempted to give it a shot in the front-end arena.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It’s been almost a quarter since I joined the new team. For the recent month, all the efforts have been spent on the <strong>Mini ERP Pro]]>
    </summary>
    
      <category term="nodejs" scheme="http://blog.yubeiluo.me/categories/nodejs/"/>
    
      <category term="angular" scheme="http://blog.yubeiluo.me/categories/nodejs/angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use Css After Psuedo Element To Center Play Icon]]></title>
    <link href="http://blog.yubeiluo.me/2015/07/08/Use-Css-After-Psuedo-Element-To-Center-Play-Icon/"/>
    <id>http://blog.yubeiluo.me/2015/07/08/Use-Css-After-Psuedo-Element-To-Center-Play-Icon/</id>
    <published>2015-07-08T08:58:58.000Z</published>
    <updated>2015-07-08T11:00:29.000Z</updated>
    <content type="html"><![CDATA[<p>Today, I would like to share with you some css tricks that were discovered and learned in my own project, where they were employed to place a play icon in the middle of an image.</p>
<h1 id="Background">Background</h1><p>During my recent development of a web ui for managing the post library (user can see the list and perform actions on each of them), it is needed to render the UI based on the post type. For the post with attached video, it is required to display the <strong>play</strong> icon in the center of the video snapshot image that could be simply clicked by the user to play the video.</p>
<h1 id="Desired_Effect">Desired Effect</h1><p>One picture is worth than thousands words and here comes the snapshot.</p>
<p><img src="/uploads/Use-Css-After-Psuedo-Element-To-Center-Play-Icon/snapshot-1.png" alt=""></p>
<h1 id="Tricky_Things">Tricky Things</h1><p>In order to achieve the wanted functionality, it was not an easy task for me since I just re-picked up the web tech stack two months ago due to lack of labor and lots of stuff has changed dramatically.</p>
<p>The most unpleasant issue I feel with front-end development is the enormous details that one has to take care of, such as the gigantic css rules. And it is very likely to forget the technique that was previously used.</p>
<p>Next, I will talk about the facts and findings that were learned.</p>
<h2 id="CSS_Positions">CSS Positions</h2><p>There are four possible values for the css <strong>position</strong> property per the below table.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">static</td>
<td>the default value</td>
</tr>
<tr>
<td style="text-align:left">relative</td>
<td>relative to the original position and will stay in the normal document structure</td>
</tr>
<tr>
<td style="text-align:left">absolute</td>
<td>relative to the first positioned parent element and will be removed from the document structure</td>
</tr>
<tr>
<td style="text-align:left">fixed</td>
<td>relative to the viewport and will stay in the normal document structure</td>
</tr>
</tbody>
</table>
<p>Please be noted that when positioned as absolute, the following statements hold true:</p>
<ol>
<li><p>The element will become an inline-block element and its width and height will auto-adjust to the contained elements.</p>
</li>
<li><p>The parent element will not any reserve space for it and therefore overlapping could occur.</p>
</li>
<li><p>The element will be positioned relative to the first positioned parent element that has the position property set to a value other than <strong>static</strong></p>
</li>
</ol>
<h2 id="Pseudo_Elements">Pseudo Elements</h2><p>What the hell are them? You may wonder the same as I did the first time when I heard the words. Actually, they are basically css rules like <strong>a:after,a:before</strong> that can 1) add more flexibility than plain javascript 2) remove unnecessary html code. Here are some facts to bear in mind.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">a</span>:<span class="value">before&#123;</span><br><span class="line">  display: block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"><span class="string">"the content will be inserted before the a's content"</span></span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>They do not appear in the DOM and are rendered by the css renderer. Henceforth, it is not possible to manipulate them via javascript.</p>
</li>
<li><p>The content property <strong>CAN NOT</strong> be missing.</p>
</li>
<li><p>The default display value is inline and can be modified to suit your needs.</p>
</li>
</ol>
<h1 id="The_Solution">The Solution</h1><p>Okay, it is time to put all the pieces together to have the whole picture.</p>
<p>First, the html markup:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"my-video-content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">ng-src</span>=<span class="value">"&#123;&#123;feed.video.thumbnailUrl&#125;&#125;"</span> <span class="attribute">alt</span>=<span class="value">""</span> <span class="attribute">class</span>=<span class="value">"img-thumbnail"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">ng-click</span>=<span class="value">"playVideo(feed)"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Secondly, the css styles:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.my-video-content</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.my-video-content</span> <span class="rule"><span class="attribute">a</span>:<span class="value">after &#123;</span><br><span class="line">	font-family: <span class="string">"Glyphicons Halflings"</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-webkit-font-smoothing</span>:<span class="value"> antialiased</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">"\e029"</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin</span>:<span class="value"> -<span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">20px</span></span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Explanation">Explanation</h2><ol>
<li><p>The dimension of the video snapshot image is dynamic, so we need to have a container to have its width auto-adjust to that of the enclosed image. By default, the width of a div container will flow to 100% of its parent’s width and that is exactly where <strong>display=inline-block</strong> came to the rescue.</p>
</li>
<li><p>The <strong>.my-video-content a:after</strong> element is now positioned relative to the <strong>.my-video-content</strong> container and we also need to set both the top and left to 50% so that the left corner of the icon box is sitting in the middle of the image.</p>
</li>
<li><p>The goal is to center the icon box not the left corner, so we need to offset both the top and left margin to half of the icon’s height and width.</p>
</li>
</ol>
<h1 id="Conclusion">Conclusion</h1><p>Hopefully, the above tips could come to help and inspire your own development and please do not hesitate to correct me if anything I wrote above is wrong.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Today, I would like to share with you some css tricks that were discovered and learned in my own project, where they were employed to pla]]>
    </summary>
    
      <category term="css" scheme="http://blog.yubeiluo.me/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Winston Rolling File Appender]]></title>
    <link href="http://blog.yubeiluo.me/2015/06/29/Winston-Rolling-File-Appender/"/>
    <id>http://blog.yubeiluo.me/2015/06/29/Winston-Rolling-File-Appender/</id>
    <published>2015-06-29T08:36:02.000Z</published>
    <updated>2015-06-30T09:51:10.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/winstonjs/winston" target="_blank" rel="external">Winston</a> is a great library for asynchronous logging in nodejs applications. It has the wonderful abstraction of transport where log messages will be delivered to and several built-in transports are provided out of the box per the below table (the list is incomplete).</p>
<table>
<thead>
<tr>
<th style="text-align:left">Transport Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Console</td>
<td>Log the messages in the console</td>
</tr>
<tr>
<td style="text-align:left">File</td>
<td>Log the messages in a file such as <strong>app.log</strong></td>
</tr>
<tr>
<td style="text-align:left">DailyRotateFile</td>
<td>Log the message in a file that rotates bases upon rules like the capped file size, date pattern</td>
</tr>
</tbody>
</table>
<p>For a production setup, you will find the <strong>DailyRotateFile</strong> transport useful since it could rotate your log files automatically based on the rules which are configurable.</p>
<h2 id="Problems">Problems</h2><p>If you follow the instructions outlined in the official winston repo, it is very likely that you will feel as surprised as I do. To summarize, here is a list of issues that make me feel uncomfortable sorted by the level from the most serious to the least.</p>
<h3 id="Message_Loss">Message Loss</h3><p>Yes!! You hear me, some messages will fail to be delivered to the log file. This is what exactly happened to my environment, where there are two transports configured, one is the <strong>Console</strong> and the other is the <strong>DailyRotateFile</strong>. After the app bootstraps, by comparing the messages between the console and the file, it is observed that some message will become lost in the file. Since logging is such as vital part of an application, how could you endure and afford the consequences of any message losses?</p>
<h3 id="Not_Tailer_Friendly">Not Tailer Friendly</h3><p>I admit that it is the OCD that helps to forge a habit that every time before an app is run, I will open another terminal to tail the app log file to see if everything goes on smoothly as expected and this command is often an alias defined in the bash profile such as</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> app.log=tail <span class="operator">-f</span> <span class="variable">$APP_HOME</span>/logs/app.log</span><br></pre></td></tr></table></figure>
<p>But when using the <strong>DailyRotateFile</strong> transport, the file name is dynamic according to the configured rules. The default value is the configured file name plus the current date suffix in the <strong>yyyy-mm-dd</strong> format like <strong>app.2015-06-29.log</strong>.</p>
<p>The problem with this is that there is no way to define a permanent alias to tail the log file since the file name changes and it would be handy if the transport could produce a file that never changes its name but still contains the latest log messages.</p>
<p>What about a symbolic link file that always links to the up-to-date log file and changes as well when the underlying file changes?</p>
<h2 id="Solution">Solution</h2><p>After reading the source code of winston, I have decided to fork the <a href="https://github.com/mallocator/Winston-Rolling-File-Appender" target="_blank" rel="external">Winston-Rolling-File-Appender</a> and roll out my own version of <strong>DailyRotateFile</strong> transport. Please go to <a href="https://github.com/yubeiluo/Winston-Rolling-File-Appender" target="_blank" rel="external">Another-Winston-Rolling-File-Appender</a> for furthur details about this little tranport that makes my life eaiser. Hopefully it could help you as well if by any chance you are suffering from the same issues.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/winstonjs/winston" target="_blank" rel="external">Winston</a> is a great library for asynchronous logging in ]]>
    </summary>
    
      <category term="nodejs" scheme="http://blog.yubeiluo.me/tags/nodejs/"/>
    
      <category term="winston" scheme="http://blog.yubeiluo.me/tags/winston/"/>
    
      <category term="nodejs" scheme="http://blog.yubeiluo.me/categories/nodejs/"/>
    
  </entry>
  
</feed>