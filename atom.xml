<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[A passionate coder, footballer and dreamer]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.yubeiluo.me//"/>
  <updated>2016-10-11T08:42:08.000Z</updated>
  <id>http://blog.yubeiluo.me//</id>
  
  <author>
    <name><![CDATA[David Yu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Lessons-Learned-in-Scaling-Activiti]]></title>
    <link href="http://blog.yubeiluo.me/2016/06/07/Lessons-Learned-in-Scaling-Activiti/"/>
    <id>http://blog.yubeiluo.me/2016/06/07/Lessons-Learned-in-Scaling-Activiti/</id>
    <published>2016-06-07T09:21:15.000Z</published>
    <updated>2016-10-11T08:42:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="背景介绍">背景介绍</h1><p>由于项目的保密原因, 文中涉及到保密的信息都会以**或者XX进行隐藏, 本文只是从技术的角度对遇到的问题进行记录和讨论.</p>
<p>在实现一个复杂业务场景的时候通用的做法是</p>
<ul>
<li>分而治之，将复杂的东西简单化，抽象出一系列简单的可复用的服务</li>
<li>将简单的服务组装起来实现业务需求</li>
</ul>
<p>上面的思想其实就是unix的哲学之一:</p>
<ol>
<li>Write programs that do one thing and do it well.</li>
<li>Write programs that work together.</li>
</ol>
<p>其中第二点中最有名的代表就是unix中的pipe抽象：</p>
<ul>
<li>每个程序的输出(stdout)都可以成为另外一个程序的输入(stdin)</li>
<li>通过pipe把它们自由组合起来解决更加复杂的问题</li>
</ul>
<p>一个简单的例子是：统计一个文件的单词的频率，并且按照频率的由高到低进行排列，（为了简单起见，假定该文件的每一行为一个单词）<br>一个可能的命令行如下所示：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat words | sort | uniq -c | sort -nr</span><br></pre></td></tr></table></figure></p>
<p>可是，当复杂问题不是简单的serial sequence flow而是包含逻辑分支的时候，pipe就显得不够用了。一个简单粗暴的做法就是hard code，可以利用编程语言的<strong>logical and conditional constructs</strong>进行编排，这只适用于业务不复杂并且不易变更的场景。一旦业务变得复杂起来例如包含很多决策分支以及变更频繁，该方法就显得十分拙劣了。对于营销域来讲，业务的变更会比较频繁，涉及的流程也会比较多，并且会包含很多决策分支，因此研究一种更好更优雅的解决方案变得十分必要。经过讨论，营销系统分为核心层和产品层，核心层提供核心的原子性的业务能力，产品层引入流程引擎来做流程的编排服务，实现具体的业务场景。</p>
<h1 id="Activiti技术攻坚">Activiti技术攻坚</h1><h2 id="背景介绍-1">背景介绍</h2><p>Activiti的创始人Tom Baeyens是在业界老有名气的传统的工作流引擎jBPM的author，他离开JBOSS之后加入了Alfresco公司并很快推出了基于jBPM4的开源工作流系统Activiti。Activiti本身的定位是：</p>
<p><strong>“Activiti is a light-weight workflow and Business Process Management (BPM) Platform targeted at business people, developers and system admins. It’s core is a super-fast and rock-solid BPMN 2 process engine for Java “</strong></p>
<h2 id="What">What</h2><p>由于我之前有过使用JBPM工作流引擎的经验，而Activiti可以说是更加优秀的分支版本，为了能够在1.3版本中引入它，需要提前做好技术攻坚工作。</p>
<h2 id="Why（分库分表原因）">Why（分库分表原因）</h2><ol>
<li>可靠性 - 可以使用Activiti的内存模式，内存模式存在固有的可靠性风险。一旦发生系统故障例如断电，整个流程必须重新开始，对于非幂等的操作可能会造成不正确的结果。</li>
<li>高性能 - Activiti默认是单库，存在容量和性能瓶颈，而营销场景需要支持高并发特别是大促之际，进行分库分表就势在必行。而**-jdbc是当仁不让的选择，于是就开启了下面的一段折腾之旅。</li>
</ol>
<h2 id="How">How</h2><h3 id="More_About_ClassLoader_Sub-System">More About ClassLoader Sub-System</h3><p>由于在集成的过程了遇到了不少由于classloader引起的问题，在这里想简单的总结下Java中最重要也让人比较困惑的概念—<strong>Classloader</strong>.</p>
<h4 id="A_high_level_conceptual_view">A high level conceptual view</h4><p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_18.png" alt=""></p>
<ol>
<li><p>Java早期是作为客户端的applet出现的，最早的版本是没有classloader这个东西的，后来发现有安全漏洞，然后就引入的classloader，用于做类的安全隔离：在JVM中一个类是由1) 它的classloader 2）它的FQN 唯一定义的</p>
</li>
<li><p>Classloader是有层次的，该层次不是interitance hierarchy, 而是delegation hierarchy，在早期的客户端模式中，由于网络的原因，类的加载都是lazy load，并且为了保证不重复加载同样的类，Classloader的加载流程一般都是：</p>
<ul>
<li>从parent classloader加载</li>
<li>如果parent未找到，从本地加载</li>
</ul>
</li>
<li><p>后来发现Java平台更加适合服务器的领域，客户端的那种限制就没有了，这个时候的加载模型一般都是：</p>
<ul>
<li>从本地加载</li>
<li>如果本地未找到，delegate至parent进行加载</li>
</ul>
</li>
<li><p>JVM启动的时候会生成下面的classloader层次：</p>
<ul>
<li>bootstrap classloader会加载lang包下的类以及其它运行时需要的基础类</li>
<li>extension classloader会加载位于java.ext.dirs目录下的jar包</li>
<li>system classpath classloader会按需加载位于classpath目录列表</li>
</ul>
</li>
</ol>
<h3 id="Learn_**">Learn **</h3><p>工欲善其事必先利其器，第一步需要完成的就是学习**-jdbc的工作原理，使其成为以后开发工作中的swiss army knife之一。</p>
<p>当然，我最喜欢的学习方式就是LBD（learn by doing），于是开始尝试在本地搭建一个简单的demo，两个库，每个库两张分表，以此来验证**的正确性。学习的过程主要遇到了下面的问题：</p>
<ul>
<li>XXConfigLocal=true，不起作用，观察日志<strong>-client.log,发现它每次都会访问</strong>拉取配置文件，然后覆盖到本地目录~/conf/XX/，所以每次在本地修改后都需要手动的上传到XX配置中心</li>
</ul>
<h3 id="Learn_Activiti">Learn Activiti</h3><p>主要是RTFD，阅读Activiti的官方文档，由于之前有过JBPM的使用经验，这一步进展的比较顺利，很快的搭建了一个demo来验证我们最初的设想：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_2.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_3.png" alt=""></p>
<p>上面两个流程体现了以下的设计思想：</p>
<ul>
<li>原子性的公共组件: 其中Get User Info用于调用XX获取会员的信息, Send Award用于调用发奖核心执行发奖逻辑</li>
<li>组件之间通过Activiti进行流程编排，实现特定的业务场景，不同的业务场景可以共用相同的业务组件，减少编码的工作量</li>
<li>组件的入参由特定的script task （groovy script）负责进行转换，出参设置到流程的上下文环境，以实现不同组件之间的交互</li>
</ul>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_1.png" alt=""></p>
<p>如何产品化的思路:</p>
<ul>
<li>提供一系列的核心API，一旦发布出去就必须保持向后的兼容性</li>
<li>提供组装API的能力，客户可以根据核心API自动组装成满足业务需求的新API</li>
<li>配置中心进行元数据管理</li>
<li>提供一系列Composite API, 用于封装常用的业务场景API</li>
<li>提供客户进行二次开发的能力，由集成团队进行实施.</li>
</ul>
<h4 id="Database_Design">Database Design</h4><p>Activiti数据库的表分为五种类型：</p>
<ol>
<li><p>通用类型，以GE（General）开头</p>
<ul>
<li>ACT_GE_PROPERTY: 以Key-Value形式存储全局的配置性信息，例如当前的schema版本，序列号的值（内置的IdGenerator实现会使用该值生成表的主键ID）</li>
<li>ACT_GE_BYTEARRAY:   存储二进制数据,例如流程定义的xml以及导出的流程图片、流程变量的序列化二进制数据（<strong>trouble maker之一</strong>）</li>
</ul>
</li>
<li><p>仓储类型，以RE（Repository）开头</p>
<ul>
<li>ACT_RE_DEPLOYMENT：存放部署的数据</li>
<li>ACT_RE_PROCDEF： 存放流程定义的数据</li>
</ul>
</li>
<li><p>身份认证类型，以ID（Identity）开头</p>
<ul>
<li>ACT_ID_USER：存放用户数据</li>
<li>ACT_ID_GROUP：存放用户组数据</li>
<li>ACT_ID_MEMBERSHIP：存放用户和用户组关系（多对多）的数据</li>
</ul>
</li>
<li><p>运行类型，以RU（runtime）开头</p>
<ul>
<li>ACT_RU_EXECUTION：存放流程实例数据</li>
<li>ACT_RU_IDENTITYLINK</li>
<li>ACT_RU_VARIABLE：存放流程变量数据</li>
<li>ACT_RU_TASK：存放流程任务数据（主要用途是实现工作流，任务需要由用户或者用户组来领取和完成）</li>
<li>ACT_RU_JOB：存放流程job数据</li>
</ul>
</li>
<li><p>历史类型，以HI（History）开头</p>
<ul>
<li>ACT_HI_PROCINST</li>
<li>ACT_HI_TASKINST</li>
<li>ACT_HI_VARINST</li>
<li>ACT_HI_IDENTITYLINK</li>
<li>ACT_HI_DETAIL</li>
<li>ACT_HI_ATTACHMENT</li>
<li>ACT_HI_ACTINST</li>
<li>ACT_HI_COMMENT</li>
</ul>
</li>
</ol>
<h5 id="High_Level_ER_Model_Diagram">High Level ER Model Diagram</h5><h4 id="Source_Code_Digging">Source Code Digging</h4><p>Demo已经成功的验证了我们的想法，从黑盒的视角使用了Activiti的基本功能，但是由于我们有可能要对它的数据库进行手术，了解它的内部实现就变得很有必要。根据过往的开发经验，所有系统最核心的部分就是数据库的设计，一旦弄清楚了数据库设计以及数据访问逻辑，系统就算了解了一半了。</p>
<ol>
<li><p>分析Activiti的持久层，用VP画出的class diagram如下图所示：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_4.png" alt=""></p>
<ul>
<li><p>Activiti所有表的ID的生成都是依赖IdGenerator这个接口，其中默认实现使用DbIdGenerator，它会读取表ACT_GE_PROPERTY中key=next.dbid的记录，然后取一定的范围来生成ID，并发量很大的时候会有写入的瓶颈以及ID重复的可能。</p>
</li>
<li><p>Activiti提供了和Spring进行集成的组件，并且暴露了dataSource和idGenerator属性可以进行依赖注入，如下图所示</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_5.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_6.png" alt=""></p>
</li>
</ul>
</li>
</ol>
<ol>
<li><p>按照我们的使用场景，可以把Activiti的数据分为两类：一类是配置类型的数据，该数据只在部署流程的时候生成，而流程部署一般属于上线的操作，因此不需要分库分表；还有一类是流水类型的数据，由于需要大规模访问，需要进行分库分表。按照XX同学之白的建议，理想情况的配置是配置两个数据源，一个数据源是最简单的数据源，一个数据源是需要sharding的数据源，但是由于Activiti只暴露了一个数据源，所以我们需要将配置类型的数据和流程类型的数据配置在同一个分库分表数据源中，这个时候就需要利用<a href="http://doc.alipay.net/middleware/zdal/zdal-func/zdal-routing.html" target="_blank" rel="external">XX的数据访问路由机制</a>来达到下面的目的：</p>
<ol>
<li>所有对配置数据的访问路由到XX_00库，ACT_XX_000表</li>
<li>所有对流水数据的访问按照路由规则进行正常的分库分表路由</li>
</ol>
<p>为了实现上面的第一个要求，只有通过XX数据访问路由实现之一的DBSelectorIDRouteCondition来实现，而且必须修改Activiti的源代码才可以做到! To be honest, this is the last thing we want to do :(. 修改源代码确实有风险，测试同学肯定会跳出来反对，让我们三思而行的，可是只要我们知道修改的原因并做到风险可控即可（Don’t worry, we know what we are doing!）</p>
</li>
</ol>
<h3 id="Problems_Encountered">Problems Encountered</h3><h4 id="XX’s_DatabaseMetaData">XX’s DatabaseMetaData</h4><p>在修改代码之前，谈谈遇到的一个XX的问题 - <strong>XX的JDBC实现不完整，其中DatabaseMetaData接口大部分都没有实现</strong>。</p>
<h5 id="场景复现">场景复现</h5><p>在集成spring自动化部署流程的时候，Activiti在执行初始化的时候，会做一个自检，该自检需要检查流程表（ACT_RU_EXECUTION）是否存在，这个时候调用了DatabaseMetaData对象的接口进行查询，调用代码和ZDAL的实现ZDatabaseMetaData如下所示：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_7.png" alt=""></p>
<p>和XX同学之白沟通后，他认为对于分库分表数据源来讲：<br>1.接口有二义性</p>
<p>2.没有调用需求</p>
<p>我的观点是XX数据源最好能够实现该接口，保持一致性，因为对于内部的系统，我们可以限制不要使用相关的API，对于外部的系统，things are simply out of our own control.</p>
<h5 id="Solution">Solution</h5><p>修改源代码，跳过该验证，由于我们能够确保运行时该表是存在的，所以验证是可以跳过的。</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_8.png" alt=""></p>
<p>当然，更好的做法是与Activiti development team进行沟通讨论看能否把上面的sanity check功能做成可配置化的一个开关，如果不需要<br>该验证的话直接通过配置就可以关闭，由于时间有限就没有进行了，后续可以考虑和他们建立起联系。</p>
<h4 id="设置配置表的数据路由">设置配置表的数据路由</h4><p>我们需要使用的配置表有：</p>
<ol>
<li>ACT_GE_PROPERTY</li>
<li>ACT_RE_DEPLOYMENT</li>
<li>ACT_RE_PROCDEF</li>
<li>ACT_GE_BYTEARRAY</li>
</ol>
<p>第一个要解决的问题是配置表的路由问题，需要修改Activiti的数据库访问层，在访问上面的表之前添加好数据路由逻辑。以ProcessDefinitionEntityManager为例，在执行数据库访问之前都要添加路由访问规则：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_9.png" alt=""></p>
<p>还有个需要修改的地方是对上面表插入数据的时候，由于插入操作是由DbSqlSession来进行统一处理的，我们也需要添加相应的规则. 数据的插入分为两种，一种是Regular Insert即单条记录插入，一种是Bulk Insert即批量插入：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_10.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_11.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_12.png" alt=""></p>
<h4 id="XX不支持BLOB数据的插入">XX不支持BLOB数据的插入</h4><p>Activiti中每个流程都是定义在后缀名为<strong>bpmn的XML文件</strong>, Activiti提供的Designer插件能够对其进行可视化的编辑。</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_13.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_14.png" alt=""></p>
<p>Activiti在进行流程部署的时候，会保存流程对应的定义即XML文件，以及通过该XML文件生成的流程图片。而该文件是保存在表<strong>ACT_GE_BYTEARRAY</strong>的字段<strong>BYTES_</strong>中，该字段的类型为BLOB，有下图为证：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_15.png" alt=""></p>
<p>测试的时候发现，保存流程定义的时候报错，错误为<strong>Caused by: java.lang.ArrayIndexOutOfBoundsException: 2</strong>，经过追踪执行过程后发现，是XX本身的bug导致二进制数据保存失败，如下图所示：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_16.png" alt=""></p>
<p>和XX同学进行沟通之后，在XX平台报告了问题,XX同学会对尽快对其进行修复。</p>
<p>由于该问题属于blocker，在XX同学发布修复之前我们需要在本地自己修复掉该bug，否则技术攻坚工作就没法继续进行。因此就开始了在本地手动修改XX-client源代码的实验，万万没想到，本来以为很简单的事情确掉入了另外一个坑之中。</p>
<p>要修改的代码很简单，如下所示：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_17.png" alt=""></p>
<p>像修改Activiti源代码一样，手动的进行编译、打包、替换，运行的时候确发现上面的错误总是存在，通过断点追踪发现自己的修改根本没有起任何作用。寻思折腾良久，百思不得其解，后来突然想到有可能是ClassLoader引起的问题。被替换掉的jar包位于/Users/david/.m2/repository/XX, 既然没有生效那么只有一个可能就是运行时被加载的代码位于其他地方，而我又想到XX是通过ClassLoader来实现Bundle之间的上下文隔离的（其实是基于equinox框架，而equinox是OSGI的一个实现），通过追踪它的ClassLoader的加载过程，发现它从XX目录下的jar包进行加载，当把修改后的XX.jar拷贝到该目录之后，问题就消失了.</p>
<h4 id="实现IdGenerator">实现IdGenerator</h4><p>在Activiti的设计中，IdGenerator用于负责所有实体的主键ID生成，它的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * generates &#123;<span class="doctag">@link</span> IdBlock&#125;s that are used to assign ids to new objects.</span><br><span class="line"> *</span><br><span class="line"> * The scope of an instance of this class is process engine,</span><br><span class="line"> * which means that there is only one instance in one process engine instance.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> Tom Baeyens</span><br><span class="line"> * <span class="doctag">@author</span> Joram Barrez</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getNextId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于我们把它的实体分为配置数据和流水数据两大类，对于配置类型的数据我们可以使用它的<strong>StrongUuidGenerator</strong>实现类来生成uuid作为主键使用。对于流水数据我们需要根据外部的流水号利用ZDAL-Sequence组件来生成全局唯一的主键ID，因此该接口需要感知被服务的实体对象，修改的接口如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getNextId</span><span class="params">(PersistentObject persistentObject)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时搜索引用到它的地方，进行相应的修改。外部调用的时候需要传入外部流水号，因此设计了下面的接口和实现类：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_19.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_20.png" alt=""></p>
<h4 id="java-lang-NoSuchMethodError:_org-slf4j-Logger-trace(Ljava/lang/String;Ljava/lang/Object;)V">java.lang.NoSuchMethodError: org.slf4j.Logger.trace(Ljava/lang/String;Ljava/lang/Object;)V</h4><p>在Eclipse IDE中执行测试用例的时候发现报下面的错误：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_21.png" alt=""></p>
<p>原因的本质还是classloader的问题，因为Activiti引用的slf4j的版本是<strong>1.7.6</strong>, 我看了下它的源代码是Logger接口是包含trace方法的，<br>那只有一个原因是加载了老的版本，该版本不包含上面的trace方法，导致NoSuchMethod的error。后来发现XX自动引入的版本是1.3.0，并且会优先加载。</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_22.png" alt=""></p>
<h5 id="Solution-1">Solution</h5><p>JVM的system classloader加载类的时候会去从classpath指定的目录列表进行顺序加载，所以可以通过把新版本的slf4j放到classpath的前面让新版本的优先加载。</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_23.png" alt=""></p>
<p>经验证，通过部署的方式运行即调用<strong>s run</strong>不存在该问题.</p>
<h4 id="又一个Classloader引发的血案">又一个Classloader引发的血案</h4><p>Activiti的Task有很多类型，其中一种比较常见的是Service Task，这也是Activiti和外部进行集成的地方，并且可以通过UEL（unified expression language）调用Spring上下文中指定bean的指定方法。但是在测试的时候发现会报下面的错误:</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_24.png" alt=""></p>
<p>当时头都大了，以为是什么严重的错误，后来通过debug发现罪魁祸首还是classloader导致的：“抽象类ExpressionFactory的classloader和通过反射生成的实现类的classloader不一样”。其中org.activiti.engine.impl.javax.el.ExpressionFactory类的class loader为com.alipay.cloudengine.extensions.equinox.KernelAceClassLoader@336206d8：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_25.png" alt=""></p>
<p>ExpressFactory类在生成实现类的时候会使用反射来加载：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_26.png" alt=""></p>
<p>其中生成的类clazz是通过其他的system classpath classloader进行加载的:</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_27.png" alt=""></p>
<p>导致ExpressionFactory.class.isAssignableFrom(clazz)返回false，从而导致错误。</p>
<h5 id="solution">solution</h5><p>ExpressionFactory类是通过反射对生成实现类进行加载，加载的过程会首先获取ProcessEngineConfigurationImpl对象的classloader属性作为首选的classloader进行加载，如果该classloader为null，则会使用当前线程的context classloader（该classload为system classpath classloader）。而ProcessEngineConfigurationImpl对象的classloader属性可以通过Spring进行注入，默认为null。修改后的逻辑如下所示：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_28.png" alt=""></p>
<h4 id="配置表和流水表进行join">配置表和流水表进行join</h4><p>在实现从断点恢复流程执行的时候，默认使用了Activiti提供的Query API进行查询：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line">       Execution execution = runtimeService.createExecutionQuery().executionId(executionId)</span><br><span class="line">           .singleResult();</span><br></pre></td></tr></table></figure>
<p>结果发现生成的sql会执行inner join查询，问题是该join参与的两张表一张是流水表<strong>ACT_RU_EXECUTION</strong>，一张是配置表<strong>ACT_RE_PROCDEF</strong>，导致出错。</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_30.png" alt=""></p>
<h5 id="Solution-2">Solution</h5><p>使用Activiti内部的Command设计，封装一个Command用于查询Execution，调用CommandExecutor接口：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_31.png" alt=""></p>
<h4 id="跨库事务">跨库事务</h4><p>每个流程都可以关联多个流程变量，当流程变量的类型为复杂类型例如Map,或者用户自定义类型的时候，流程变量的值默认会保存在表ACT_GE_BYTEARRAY，而由于该表是配置表，这样当流程数据对应的流水分表和ACT_GE_BYTEARRAY表不在同一个库里面就会导致跨库事务的问题，而XX目前不支持跨库的事务，详情请参加<a href="http://baike.inc.alipay.net/index.html#/question/3238?_k=h3fqef" target="_blank" rel="external">错误</a></p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_32.png" alt=""></p>
<h5 id="Solution-3">Solution</h5><p>Activiti提供了定制化流程变量序列化的接口，默认使用JVM自身的序列化机制，该机制本身就有不少问题，例如兼容性,效率. 可以定制化自己的序列化方案—JSON存储流程变量：</p>
<ol>
<li>序列化的时候要保存类的信息，这样在反序列化的时候才能通过反射生成对应类的实例</li>
<li>JSON字符串直接存储于流程变量表的text字段，避免了跨库的事务</li>
</ol>
<p>实现类如下：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_33.png" alt=""></p>
<p>相关的Spring配置如下：</p>
<p><img src="/uploads/Lessons-Learned-in-Integrating-Activiti-Using-Zdal/screenshot_34.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景介绍">背景介绍</h1><p>由于项目的保密原因, 文中涉及到保密的信息都会以**或者XX进行隐藏, 本文只是从技术的角度对遇到的问题进行记录和讨论.</p>
<p>在实现一个复杂业务场景的时候通用的做法是</p>
<ul>
<li>分而治之，将复杂的东西简]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[大话Javascript的promise]]></title>
    <link href="http://blog.yubeiluo.me/2016/04/13/%E5%A4%A7%E8%AF%9DJavascript%E7%9A%84promise/"/>
    <id>http://blog.yubeiluo.me/2016/04/13/大话Javascript的promise/</id>
    <published>2016-04-13T04:05:59.000Z</published>
    <updated>2016-04-13T10:20:20.000Z</updated>
    <content type="html"><![CDATA[<p>Frank Underwood曾在”House of Cards”的第一季中对当时的”chief of staff” Linda说过一句话“The nature of <strong>promises</strong>, Linda, is that they remain immune to changing circumstances.”</p>
<p><strong>Promise的本质是它们不会受到外面的干扰而发生变化！</strong></p>
<h1 id="Why">Why</h1><p>为什么要使用promise？</p>
<p>让我们首先来看看Javascript的工作模型 - <strong>基于事件回调机制的异步编程模型</strong>。JS天生就是异步的！</p>
<p>如果上面的话让你感到迷惑，不妨细心思考下人们自身的工作模式。你会惊讶的发现”JS和人们的工作方式是如此的一致- 一次只能同时处理一件事情！”</p>
<p>而现实的世界确并非如此，许多事情可以同时发生，例如你在客厅看书和厨房的水正在烧着这两件事情是可以并行发生的。</p>
<p>当水烧开的时候，水壶会发出警告声，当警告声响起的时候，你会停止看书，然后去处理已经烧开了的水，把水倒进水瓶，给自己倒一杯热茶，然后在继续进行看书。</p>
<p>上面的过程用JS来表示就是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line">  , waterBoiler = <span class="keyword">new</span> EventEmitter();  <span class="comment">// 代表水壶，水壶本身可以生成事件例如水开的事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示读书的过程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readBook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'读书中'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(readBook, <span class="number">1000</span>); <span class="comment">// 模拟读书的过程,每秒执行readBook过程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册异步回调处理水烧开的事件</span></span><br><span class="line">waterBoiler.on(<span class="string">'boiled'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'水已经烧开了'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟水开的事件,10s后触发</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  waterBoiler.emit(<span class="string">'boiled'</span>);</span><br><span class="line">&#125;, <span class="number">10</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>程序的输出如下：</p>
<p><img src="/uploads/All-About-Promise/screenshot-1.png" alt=""></p>
<p>从上面的截图可以看出，系统大约在第10秒的时候触发了水壶的烧开事件，并且调用了烧开事件的回调函数，打印出了”水已经烧开”，接下来系统又继续回到了读书的过程中。</p>
<p>So far so good!</p>
<p>假设当水烧开了，我们给自己倒了一杯茶，由于茶水很烫，我们想等茶不再那么滚烫再喝。</p>
<p>我们需要修改水开事件的回调函数，添加等待茶水不再滚烫事件的回调函数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册异步回调处理水烧开的事件</span></span><br><span class="line">waterBoiler.on(<span class="string">'boiled'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'水已经烧开了'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'给自己沏一杯茶水'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'等到茶水不再滚烫后再喝'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tea = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册茶水不再滚烫的事件</span></span><br><span class="line">  tea.once(<span class="string">'no-longer-hot'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'茶已经不在滚烫了，可以开始喝茶啦！'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟茶水不再滚烫的事件, 5s后触发</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    tea.emit(<span class="string">'no-longer-hot'</span>);</span><br><span class="line">  &#125;, <span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟水开的事件,10s后触发</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    waterBoiler.emit(<span class="string">'boiled'</span>);</span><br><span class="line">&#125;, <span class="number">10</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>程序的输出如下：</p>
<p><img src="/uploads/All-About-Promise/screenshot-2.png" alt=""></p>
<p>从上面的截图可以看出，系统在第15秒的时候触发了茶水不再滚烫的事件，然后我们开始高兴的喝不滚烫的茶水了。</p>
<p>细心的读者可能已经发现了上面的问题，我们想要表达的逻辑其实很简单：</p>
<ol>
<li>等待水开 =》 2. 沏茶 =》 3. 等待水凉 =&gt; 4. 喝水</li>
</ol>
<p>其中<strong>步骤1和3</strong>都是<strong>异步的操作</strong>，步骤2和4需要分别等待步骤1和4完成之后才能继续下去。现实生活中上面的步骤可能还会有很多，如果继续使用回调的机制就会陷入无限循环的陷阱当中（所谓的the callback hell），不利于人们的理解。</p>
<h1 id="What">What</h1><p>Here comes the rescue of promises!</p>
<p>计算机科学中有一句很经典的论述 <strong>“There is no problem in Computer Science that can’t be solved by adding another layer of abstraction to it”</strong>.</p>
<p>“在计算机科学中，没有什么问题是不能够通过添加一层对原问题的抽象来予以解决的”。</p>
<p>Promise就是对基于回调机制的另外一层抽象！</p>
<p>Promise是对一个最终会返回值的异步操作的抽象。该异步操作要么会返回一个有效值，要么返回一个异常值。上面例子中的很多异步事件都可以抽象为promise。例如水壶烧开的事件可以抽象为水壶烧开的promise，茶水不再滚烫的事件可以抽象为茶水不再滚烫的promise，当然这两个promise的返回值我们目前不是特别关心。</p>
<h1 id="How">How</h1><p>你可以向promise注册正常返回值处理函数和异常返回值处理函数。</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(value)</span> &#123;</span></span><br><span class="line">    <span class="comment">// 正常返回值处理函数</span></span><br><span class="line">    <span class="comment">// value为正常值</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> &#123;</span></span><br><span class="line">    <span class="comment">// 异常值处理函数</span></span><br><span class="line">    <span class="comment">// err为出错的原因</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>初看起来这和普通的回调函数没有本质区别，但是由于promise的then方法返回的是另外一个promise，该promise的正常返回值为原promise的正常返回值处理函数的返回值。这样一来就可以通过then方法把需要顺序执行的异步操作以线性的方式构造出来。例如上面的四个步骤可以转换为下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>)</span><br><span class="line">  , deferred = Q.defer</span><br><span class="line">  , waterBoiledPromise = deferred.promise;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示读书的过程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readBook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'读书中'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(readBook, <span class="number">1000</span>); <span class="comment">// 模拟读书的过程,每秒执行调用readBook过程</span></span><br><span class="line"></span><br><span class="line">waterBoiledPromise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'水已经烧开了'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'给自己沏一杯茶水'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'等到茶水不再滚烫后再喝'</span>);</span><br><span class="line">    <span class="keyword">var</span> deferred = Q.defer()</span><br><span class="line">      , teaNoLongerHotPromise = deferred.promise;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟茶水不再滚烫的事件, 5s后触发</span></span><br><span class="line">    setTimeout(deferred.resolve, <span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> teaNoLongerHotPromise;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'茶已经不在滚烫了，可以开始喝茶啦！'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟水开的事件,10s后触发</span></span><br><span class="line">setTimeout(deferred.resolve, <span class="number">10</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>修改过后的代码是不是比原先的回调易读了很多呢？！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Frank Underwood曾在”House of Cards”的第一季中对当时的”chief of staff” Linda说过一句话“The nature of <strong>promises</strong>, Linda, is that they remain]]>
    </summary>
    
      <category term="Javascript" scheme="http://blog.yubeiluo.me/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[An_Introduction_Into_Javascript_Prototype_Based_Inheritance]]></title>
    <link href="http://blog.yubeiluo.me/2016/04/08/An-Introduction-Into-Javascript-Prototype-Based-Inheritance/"/>
    <id>http://blog.yubeiluo.me/2016/04/08/An-Introduction-Into-Javascript-Prototype-Based-Inheritance/</id>
    <published>2016-04-08T07:42:06.000Z</published>
    <updated>2016-04-08T13:59:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Background">Background</h1><p>Again, TL;DR</p>
<p>If you are impatient, skip this part and go ahead to <a href="#Overview">Overview</a>.</p>
<p>Recently, I’ve been learning and playing around with some of the features introduced in the <a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="external">ES6</a> or <a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="external">ES2015</a> standard such as <a href="http://es6-features.org/#ClassDefinition" target="_blank" rel="external">the class definition</a>, <a href="http://es6-features.org/#PropertyShorthand" target="_blank" rel="external">enhanced object literal</a>, <a href="http://es6-features.org/#ExpressionBodies" target="_blank" rel="external">the arrow function</a>, to name but a few. I could see where it’s going - exposing more the beauty of the language using an enhanced expressive and succinct syntax while hiding the nasty and tricky legacies of it. Whist it’s always wonderful to be able to explore new things, it matters even more that we could take some time for a meaningful pause - to look back for self-reflections and summarization.</p>
<p>I left my hand dirty in Javascript about 10 years ago when I was still a college student. As far as I could recall now, at that time, I found the language a little bit bizarre and not easy to appreciate the beauty of it, unlike what I feel today. Javascript is a weakly typed and dynamic language that gained its popularity and success in the era of web 2.0 and ajax.</p>
<p>The first hurdle I stumbled upon was the approach Javascript takes on inheritance. When I first was shown by my college professor the following lines of code modeling the bank accounts, my eyes remained wide open for quite a while.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account</span>(<span class="params">accountNo, balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accountNo = accountNo;</span><br><span class="line">    <span class="keyword">this</span>.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Account.prototype.withdrawal = <span class="function"><span class="keyword">function</span>(<span class="params">amount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">this</span>.balance &lt; amount ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"not enough balance"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.balance -= amount;</span><br><span class="line">&#125;</span><br><span class="line">Account.prototype.deposit = <span class="function"><span class="keyword">function</span>(<span class="params">amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.balance += amount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckqueAccount</span>(<span class="params">accountNo, balance, overwithdrawalLimit</span>) </span>&#123;</span><br><span class="line">  Account.call(<span class="keyword">this</span>, accountNo, balance);</span><br><span class="line">  <span class="keyword">this</span>.overwithdrawalLimit = overwithdrawalLimit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CheckqueAccount.prototype = <span class="keyword">new</span> Account()</span><br><span class="line">CheckqueAccount.prototype.constructor = CheckqueAccount</span><br><span class="line"></span><br><span class="line">CheckqueAccount.prototype.withdrawal = <span class="function"><span class="keyword">function</span>(<span class="params">amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="keyword">this</span>.balance + <span class="keyword">this</span>.overwithdrawalLimit &lt; amount ) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"overwithdrawal"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.balance -= amount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> account = <span class="keyword">new</span> CheckqueAccount(<span class="string">'001'</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">account.withdrawal(<span class="number">100</span>);</span><br><span class="line">account.deposit(<span class="number">100</span>);</span><br><span class="line">account.withdrawal(<span class="number">120</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Questions">Questions</h2><p>To summarize, the following doubts kept lingering in my brain:</p>
<ol>
<li>Why <strong>class</strong> is a <strong>function</strong>?</li>
<li>Where does the <strong>prototype</strong> property come from as shown in <strong>Account.prototype</strong>?</li>
<li>What is <strong>this</strong> as shown in the function body?</li>
<li>Where does the <strong>call</strong> property come from as shown <strong>Account.call</strong>?</li>
<li>How does the <strong>new</strong> operator work?</li>
</ol>
<p>For a new beginner, especially those from a modern OO language like Java, C++ with explicit class and inheritance declaration,  it’s very likely you would feel likewise. So, this post aims to answer the above questions and clear away the doubts in your little, fragile brain.</p>
<h1 id="Overview">Overview</h1><p>As an old saying goes, one nice graph is worth ten thousands of words. There is no need to read along if you could fully apprehend the following high level chart.</p>
<p><img src="/uploads/An-Introduction-Into-Javascript-Prototype-Based-Inheritance/screenshot-1.png" alt=""></p>
<h1 id="Details">Details</h1><h2 id="Everything_in_Javascript_is_an_object_including_functions">Everything in Javascript is an object including functions</h2><p>As you may be aware, functions are first-class citizens in Javascript unlike Java or C++.</p>
<p>Functions can serve a variety of purposes and one of them is for creating objects. We call such functions constructors.</p>
<p>So when you define the above Account constructor, this’s what happens behind the scenes:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define a constructor Account</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account</span>(<span class="params">accountNo, balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accountNo = accountNo;</span><br><span class="line">    <span class="keyword">this</span>.balance = <span class="keyword">this</span>.balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the black magic behind the scene</span></span><br><span class="line"><span class="comment">// 1. Creates an object whose prototype is Function's prototype, meaning Account object is now an instance of Function</span></span><br><span class="line">Account = <span class="built_in">Object</span>.create(<span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="comment">// 2. Call the Function's main body for the initialization of the newly-created object Account.</span></span><br><span class="line"><span class="built_in">Function</span>.call(Account)</span><br><span class="line"><span class="comment">// 3. Creating the prototype property on the newly-created object Account</span></span><br><span class="line">Account.prototype = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype)</span><br><span class="line"><span class="built_in">Object</span>.apply(Account.prototype)</span><br><span class="line">Account.prototype.constructor = Account;</span><br></pre></td></tr></table></figure>
<h2 id="Every_single_object_has_an_implicit_prototype_property_pointing_to_the_corresponding_prototype_object_for_delegating_missing_properties_lookup,_thus_forming_the_well-known_prototype_chain">Every single object has an implicit prototype property pointing to the corresponding prototype object for delegating missing properties lookup, thus forming the well-known prototype chain</h2><p>In most platforms, the prototype attribute is named as <strong>proto</strong> and could be accessed by the following methods:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">Object</span><span class="class">.getPrototypeOf</span></span><br><span class="line"><span class="tag">Object</span><span class="class">.setPrototypeOf</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/uploads/An-Introduction-Into-Javascript-Prototype-Based-Inheritance/screenshot-2.png" alt=""></p>
<h2 id="The_new_operator_is_used_to_manipulate_the_prototype_chain_on_your_behalf">The new operator is used to manipulate the prototype chain on your behalf</h2><p>Normally there’s no need to interact with the prototype related methods in Javascript as long as you follow the idiomatic way of doing things. For example, whenever there’s need to create a new instance of a class or more accurately a constructor, you simply write the following code:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span><span class="reserved">var</span> obj = <span class="keyword">new</span> Constructor(args);</span><br><span class="line"><span class="reserved">var</span> account = <span class="keyword">new</span> Account(<span class="string">'Test'</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p><strong>account</strong> is now an object, which inherits all the properties defined in Account’s prototype. Therefore, you could invoke the deposit and withdrawal method as follows:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">account</span><span class="class">.desposit</span>(100);</span><br><span class="line"><span class="tag">account</span><span class="class">.withdrawal</span>(100);</span><br></pre></td></tr></table></figure>
<p>In fact, the new expression <strong>var account = new Account(‘Test’, 1000)</strong> will be translated into the following equivalent lines of code.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 1. <span class="operator"><span class="keyword">Create</span> a blank object <span class="keyword">with</span> prototype <span class="keyword">set</span> <span class="keyword">to</span> Account.prototype</span><br><span class="line"><span class="keyword">var</span> account = Object.<span class="keyword">create</span>(Account.prototype);</span></span><br><span class="line">// 2. <span class="operator"><span class="keyword">Call</span> the Account <span class="keyword">function</span> <span class="keyword">to</span> perform initialization passing the arguments <span class="keyword">as</span> needed</span><br><span class="line">Account.<span class="keyword">call</span>(account, <span class="string">'Test'</span>, <span class="number">1000</span>)</span></span><br></pre></td></tr></table></figure>
<h2 id="Function’s_prototype_defines_actions_common_to_every_function_object_such_as_apply,_call,_bind">Function’s prototype defines actions common to every function object such as apply, call, bind</h2><p>When you define a constructor such as <strong>Account</strong>, the constructor itself becomes a full-fledegd function object, which in turn inherits all the properties defined in the object <strong>Function.prototype</strong> like <em>apply</em>, <em>call</em>, <em>bind</em>.</p>
<p>When you invoke a function, you may optionally choose to pass it a context object which could be accessed as <strong>this</strong> inside the function’s body. If not specified, the context object will be resolved as the global object in the runtime of the host system, which is the <strong>window</strong> object in the browser and the <strong>process</strong> object in the node.</p>
<p>Both the <strong>call, apply</strong> property available in a function object could be accessed as <strong>Func.apply(context, [args…]) or Func.call(context, arg1, arg2,…,argn)</strong> to invoke that function passing the first parameter as the context object and the rest as the function’s actual parameters. For example the expression <strong>Account.apply(account, [‘Test’, 1000])</strong> could be interpreted as “applying the function Account to the account object as the context with an array of parameters of ‘Test’ and 1000”. Of course, one could also write the expression <strong>Account.call(account, ‘test’, 1000)</strong> to achieve the same result.</p>
<h1 id="Answers">Answers</h1><p>This is to answer the questions raised in <a href="#Questions">section background</a>.</p>
<ol>
<li><p>Why <strong>class</strong> is a <strong>function</strong>?</p>
<p>In Javascript, class equates to constructor, which is a function object for the purpose of object creation.</p>
</li>
<li><p>Where does the <strong>prototype</strong> property come from as shown in <strong>Account.prototype</strong>?</p>
<p>When you define a function, the prototype property will be created by the runtime on the fly.</p>
</li>
<li><p>What is <strong>this</strong> as shown in the function body?</p>
<p>This is the context object to which the function is currently being applied to.</p>
</li>
<li><p>Where does the <strong>call</strong> property come from as shown <strong>Account.call</strong>?</p>
<p>Since Account is a function object, it inherits the call property defined in its prototype, which is Function.prototype.</p>
</li>
<li><p>How does the <strong>new</strong> operator work?</p>
<p>See <a href="#The_new_operator_is_used_to_manipulate_the_prototype_chain_on_your_behalf">new</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Background">Background</h1><p>Again, TL;DR</p>
<p>If you are impatient, skip this part and go ahead to <a href="#Overview">Overview<]]>
    </summary>
    
      <category term="Javascript" scheme="http://blog.yubeiluo.me/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A-Successful-GitLab-Workflow-Git-Basics]]></title>
    <link href="http://blog.yubeiluo.me/2016/01/06/A-Successful-GitLab-Workflow-Git-Basics/"/>
    <id>http://blog.yubeiluo.me/2016/01/06/A-Successful-GitLab-Workflow-Git-Basics/</id>
    <published>2016-01-06T06:58:06.000Z</published>
    <updated>2016-01-12T07:19:05.000Z</updated>
    <content type="html"><![CDATA[<p>In this blog, I will present you how to setup a successful and efficient Git workflow powered by the modern, excellent open source software that I have ever used, <strong>GitLab</strong>. The workflow aims to achieve the following targets:</p>
<ul>
<li><p>Code Review. Cultivate a culture and good habit of of code review before code is accepted in the main line.</p>
</li>
<li><p>Continuous Integration. By default, every commit will trigger a build, which should include performing regression testing to discover failures earlier not later.</p>
</li>
<li><p>Continuous Delivery. Push to deploy should be in place to save the manual deploy effort.</p>
</li>
</ul>
<p>For better organization, the topic will be discussed in two separate blogs with the first focused on the Git basics and second focused on the Gitlab. And this blog is the first one, in which, the inner workings and basic concepts of Git will be talked about at length.</p>
<h1 id="Background">Background</h1><p>TL;DR</p>
<p>What on earth am I blogging this for? Well, since my Git story could date back to year 2013 and GitLab to 2014. these are the real drivers for this blog:</p>
<ul>
<li><p>When I joined the <a href="https://18birdies.com/" target="_blank" rel="external">18birdies dev team</a> half a year ago, <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> is the only SCM tool being used for hosting the source code repositories of all the ongoing projects: iOS App, Android App, Server (Java), Web, etc. Ironically this is the same case for the previous <a href="http://www.mashanglc.com/" target="_blank" rel="external">company</a> that I worked for, where <a href="https://git-scm.com/" target="_blank" rel="external">Git</a> and <a href="https://gitlab.com/" target="_blank" rel="external">GitLab</a> were successfully introduced and popularized with my effort.</p>
</li>
<li><p>Last week, we had a new seasoned front-end developer on-board, another Git addict like me (glab to have a company). After some rounds of debate with CTO, he finally agreed that we should start to use Git in place of SVN, but before that, an appropriate development workflow or SDLC should be proposed and standardized so that all the different teams could conduct the development in a cohesive and consistent way.</p>
</li>
</ul>
<h1 id="Git">Git</h1><h2 id="Why">Why</h2><p>I have summarized as follows a list of reasons why Git should be used instead of SVN:</p>
<ul>
<li>Git is a <a href="https://en.wikipedia.org/wiki/Distributed_version_control" target="_blank" rel="external">DVCS</a>, which avoids the SPOF or single point of failure.</li>
<li>Git is <a href="#Branching">branching</a> friendly, where branching and merging is a superb lightweight operation.</li>
<li><a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="external">Linus</a> is Git’s author and Linus is my God!</li>
</ul>
<h2 id="Version_Control">Version Control</h2><p>Historically, there exists three types of version control systems:</p>
<ol>
<li>Local</li>
<li>Centralize</li>
<li>Distributed</li>
</ol>
<h3 id="Local">Local</h3><p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-1.png" alt=""></p>
<p>One example is the <strong>RCS</strong> command that is available in major Linux distributions. Here is how RCS works:</p>
<ul>
<li>Calculating the diffs between each version</li>
<li>Storing the diffs or patches in a special format in disk</li>
<li>Re-recreate any file at any time by applying all the diffs since the initial version.</li>
</ul>
<p>Shortcomings:</p>
<ul>
<li>SPOF</li>
<li>Do Not scale</li>
</ul>
<h3 id="Centralized">Centralized</h3><p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-2.png" alt=""></p>
<p>Examples are CVS, SVN, Perforce. And a typical one works like this:</p>
<ul>
<li>A single dedicated server that serves all the versioned files</li>
<li>A number of clients check out / in files from and to the server.</li>
</ul>
<p>Advantages over Local:</p>
<ul>
<li>There is communication among the team members since everyone knows to some extent what others are currently doing.</li>
<li>Authentication and Authorization. Admins could control what everyone could do.</li>
</ul>
<p>Flaws:</p>
<ul>
<li>SPOF. If the centralized server is down for some time, it becomes a blocker since nobody could do anything during the downtime: collaborate or save the changes. If the server’s disks become corrupted and there are no backups, the entire history of the project is lost.</li>
</ul>
<h3 id="Distributed">Distributed</h3><p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-3.png" alt=""></p>
<p>Examples are Git, Mercurial, Bazaar. And the fundamental difference is that the clients not only checkout the latest snapshot of the files but also fully mirrors the remote repository. Therefore, it provides the following bonuses:</p>
<ul>
<li>Every clone is a full backup of all the data including the complete history</li>
<li>In case of server downtime, any of the client’s repository could be copied back to the server to restore it.</li>
<li>Client can work with multiple remote repositories simultaneously within the same project.</li>
</ul>
<h2 id="History">History</h2><p>The following list is a brief summary about Git’s history based on the <a href="http://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git" target="_blank" rel="external">official history page</a>:</p>
<ul>
<li>From 1991 to 2002, Linux Kernel were maintained via using patches.</li>
<li>In 2002, the project began to use a proprietary DVCS called BitKeeper.</li>
<li>In 2005, BitKeep started to charge the tool and the Linus Torvalds decided to develop their own tool based on the lessons learned when using BitKeeper with the following goals:<ol>
<li>Speed</li>
<li>Simple design</li>
<li>Strong support for non-linear development</li>
<li>Fully Distributed</li>
<li>Able to handle projects like the Linux Kernel efficiently (speed and data size)</li>
</ol>
</li>
</ul>
<h2 id="Basic_Concepts">Basic Concepts</h2><ol>
<li><p>Snapshots not differences.</p>
<p>Conceptually, most other systems store information as a list of file-based changes. These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time.</p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-4.png" alt=""></p>
<p>Git thinks of its data more like a set of snapshots of a miniature filesystem. Git thinks about its data more like a stream of snapshots.</p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-5.png" alt=""></p>
</li>
<li><p>Nearly all operations are local.  </p>
<p>You could continue to work (create branches, make changes, commit) even when the remote repositories become not available.</p>
</li>
<li><p>Git has integrity.</p>
<p>All the contents are checksummed using <a href="https://en.wikipedia.org/wiki/SHA-1" target="_blank" rel="external">SHA-1</a> so that Git is able to detect any malicious behavior and accidents that result in unintended content changes.</p>
<ul>
<li><p>Disk corruption</p>
</li>
<li><p>DRAM corruption</p>
</li>
<li><p>Middle of Man Attack</p>
</li>
</ul>
<p>Git makes use of the <a href="https://en.wikipedia.org/wiki/Merkle_tree" target="_blank" rel="external">Merkle Tree</a> data structure for the purpose of efficient and secure validation of the contents of large data structures.</p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-9.png" alt=""></p>
</li>
<li><p>Git generally only add data.</p>
</li>
<li><p>The three states.</p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-6.png" alt=""></p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-7.png" alt=""></p>
<p>The basic workflow goes something like this:</p>
<ol>
<li>You modify files in your working directory.</li>
<li>You stage the files, adding snapshots of them to your staging area.</li>
<li>You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.</li>
</ol>
</li>
</ol>
<h2 id="Basic_Commands">Basic Commands</h2><ol>
<li><p>Each Git repository has a .git directory, storing metadata about the project, the most important of which is the history.</p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-8.png" alt=""></p>
</li>
<li><p>Run <strong>git init</strong> to create a git repository in an existing directory.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> repo</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run <strong>git clone</strong> to clone a remote repository (<strong>Make sure your ssh public keys are uploaded to the remote server</strong>).</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitlab<span class="class">.squarevalleytech</span><span class="class">.com</span>:<span class="number">18</span>bidies-frontend/web.git</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Configuration">Configuration</h3><p>Git stores its configuration in two places:</p>
<ul>
<li><p>~/.gitconfig (global, apply to all git repositories)</p>
</li>
<li><p>repo/.git/config (local, apply to local git repository, override the global one)</p>
</li>
<li><p>List the local configurations.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -<span class="keyword">l</span> --<span class="keyword">local</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>List the global configurations.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -<span class="keyword">l</span> --<span class="keyword">global</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Add a local configuration item.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user<span class="class">.name</span> davidyu</span><br><span class="line">git config user<span class="class">.email</span> davidyu@squarevalleytech.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add a global configuration item.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="class">.name</span> davidyu</span><br><span class="line">git config --global user<span class="class">.email</span> davidyu@squarevalleytech.com</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Please go to the <a href="http://git-scm.com/docs/gittutorial" target="_blank" rel="external">official tutorial website</a> for an in-depth instructions about learning Git.</p>
<h2 id="Object_Model">Object Model</h2><p>In a nutshell, this is how the Git object model looks like conceptually:</p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-16.png" alt=""></p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-17.png" alt=""></p>
<h3 id="Core">Core</h3><p>The first time you use Git, it’s almost a guarantee that you will feel confused from time to time about the usage of the monstrous command set, at lease it was true for me. And in order to clear away these confusions, it’s better to figure out what is happening beneath the covers from an implementation perspective.</p>
<p>So let’s start by creating an empty repository first named as object-model.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="class"><span class="keyword">object</span><span class="title">-model</span></span><br><span class="line"></span>git init</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-10.png" alt=""></p>
<p>Git will then create an <strong>.git</strong> directory where it stores the database for your project and this database contains the following items:</p>
<ul>
<li><p>config: the project specific configuration</p>
</li>
<li><p>refs: the branches, remotes, tags</p>
</li>
<li><p>HEAD: store a reference to the current branch</p>
</li>
<li><p>objects: the object database</p>
</li>
<li><p>hooks: Git event system</p>
</li>
<li><p>index: the staging area for incoming changes.</p>
</li>
</ul>
<p>Let’s add a README file and stage it.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"This is the first line"</span> &gt; README</span><br><span class="line">git <span class="built_in">add</span> README</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-11.png" alt=""></p>
<p>As it could be seen from the above screenshot, when a new file is staged, the following things will happen in Git:</p>
<ul>
<li><p>Git creates a blob object with the hash of the file contents as the filename. In our case, the contents are <strong>This is the first line</strong>, and the hash is <strong>d3e2104b9e57bf5147ed403e1f8c4760302b9387</strong>. The leading two characters <strong>d3</strong> will be used to create a directory and the remained ones <strong>e2104b9e57bf5147ed403e1f8c4760302b9387</strong> will be used as the actual file name. The contents are compressed.</p>
</li>
<li><p>Git stores a reference in the index that points to the new file README. (The index itself is essentially a tree object).</p>
</li>
<li><p>Update the index tree object.</p>
</li>
</ul>
<p>Make our first commit.</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> commit -m <span class="string">'first commit'</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-12.png" alt=""></p>
<p>When staged changes are committed, Git will do:</p>
<ul>
<li><p>Create the same tree object as the index.</p>
</li>
<li><p>Create a commit object with a reference to the tree.</p>
</li>
<li><p>Flip the tip of the current branch to point to the commit object.</p>
</li>
</ul>
<p>Now that the <strong>README</strong> file is being tracked by Git, let’s make some modifications to it.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"This is the second line"</span> <span class="prompt">&gt;&gt; </span><span class="constant">README</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-13.png" alt=""></p>
<p>The changes are not staged yet, so let’s stage the changed file.<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">add </span>README</span><br><span class="line"><span class="label">git</span> status</span><br></pre></td></tr></table></figure></p>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-14.png" alt=""></p>
<p>When you stage a tracked file, Git will do the same thing as staging a new file. That explains Git is indeed snapshotting instead of differencing between revisions or commits.</p>
<p>Finally, commit the changes.</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> commit -m <span class="string">"second commit"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-15.png" alt=""></p>
<p>The only difference for this commit was that it stored a reference to the parent commit <strong>9d2864f</strong>, whereby forming a commit tree data structure, which is virtually project’s history.</p>
<h3 id="Branching">Branching</h3><p>Understand the Git’s object model is important before you could appreciate why Git supports non-linear development or branching very well. Let’s explore more by creating a new branch <strong>develop</strong>.</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git checkout develop</span><br><span class="line">// <span class="keyword">or</span> <span class="keyword">in</span> one <span class="literal">command</span></span><br><span class="line">git checkout -b develop</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-18.png" alt=""></p>
<p>When creating a new branch, what Git does is:</p>
<ul>
<li><p>Create a new reference named as the branch name in the <strong> .git/refs/heads </strong> directory, which points to the current commit object. In our case,  <strong> .git/refs/heads/develop =&gt; eb2ad539 </strong></p>
</li>
<li><p>Flip the .git/HEAD to the new branch name. In our case, <strong> HEAD =&gt; /refs/heads/develop </strong></p>
</li>
</ul>
<p>When switching to an existing branch, Git will:</p>
<ul>
<li>Update the index and working tree to the contents of the commit object that the branch points at. In our case, nothing happens since there are no changes.</li>
</ul>
<p>So in Git, branches are nothing more than a <strong>variable pointer</strong>, pointing at a certain tip of the commit tree. The same goes for tags, whereas tag is more like a <strong>constant pointer</strong>, recording important historical moments over the project’s history.</p>
<p>One philosophy of Git is that it advocates branching and merging frequently since they are the killer feature of it, allowing for concurrent development. The following workflow should be used for the development of new features:</p>
<ul>
<li><p>Create a new feature branch from the develop branch and do your work there.</p>
</li>
<li><p>Commit changes locally, and when it is ready to share, push the changes to upstream.</p>
</li>
<li><p>When changes have been tested locally, it is ready to merge it into the develop branch.</p>
<ul>
<li><p>Switch to the develop branch.</p>
</li>
<li><p>Pull the latest from the upstream.</p>
</li>
<li><p>Perform a no fast forward merge with the feature branch and resolve conflicts if any.</p>
</li>
<li><p>Push the develop branch to upstream. And when everything is ok, delete the feature both locally and remotely.</p>
</li>
</ul>
</li>
</ul>
<p>A remote repository <strong>git@gitlab.squarevalleytech.com:demo/object-model.git</strong> was created and let’s add it in our local repository and setup the local master and develop branches to track the corresponding remote ones.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitlab<span class="class">.squarevalleytech</span><span class="class">.com</span>:demo/object-model<span class="class">.git</span></span><br><span class="line">git push -u origin master</span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-19.png" alt=""></p>
<p>Our PM assigned a new requirement about user management functionality and we started to work it out in a new feature branch as follows:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature/<span class="built_ins">user</span>-management</span><br><span class="line">echo "This is a fake <span class="built_ins">user</span> manager." &gt; UserManager.js</span><br><span class="line">git <span class="built_ins">add</span> .</span><br><span class="line">git commit -m "<span class="built_ins">add</span> a <span class="built_ins">user</span> manager"</span><br><span class="line">git push -u origin feature/<span class="built_ins">user</span>-management</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-20.png" alt=""></p>
<p>Our QA found a blocker bug in the testing environment, and needed to be fixed ASAP. For simplicity, we switch back to the develop branch and fix the bug there.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> checkout develop</span><br><span class="line"><span class="label">echo</span> <span class="string">"This will fix the bug"</span> &gt;&gt; README</span><br><span class="line"><span class="label">git</span> <span class="keyword">add </span>.</span><br><span class="line"><span class="label">git</span> commit -m <span class="string">"fix bug 1"</span></span><br><span class="line"><span class="label">git</span> <span class="keyword">push </span>origin</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-21.png" alt=""></p>
<p>From this point on, the user-management feature branch diverged from the develop branch. And we switched back to the feature branch to continue from where we left off.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature/user-management</span><br><span class="line">echo <span class="string">"The second line."</span> <span class="prompt">&gt;&gt; </span><span class="constant">UserManager</span>.js</span><br><span class="line">echo <span class="string">"The fake user domain object."</span> <span class="prompt">&gt;&gt; </span><span class="constant">User</span>.js</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"add user"</span></span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-22.png" alt=""></p>
<p>Finally, after the new feature passed testing, it was time to merge it back to the develop branch.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git pull origin</span><br><span class="line">git <span class="operator"><span class="keyword">merge</span> feature/<span class="keyword">user</span>-management <span class="comment">--no-ff</span></span><br><span class="line">git push origin</span><br><span class="line">git checkout feature/<span class="keyword">user</span>-management</span><br><span class="line">git push origin :feature/<span class="keyword">user</span>-management</span><br><span class="line">git checkout develop</span><br><span class="line">git branch -d feature/<span class="keyword">user</span>-management</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/A-Successful-GitLab-Workflow-Git-Basics/screenshot-23.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this blog, I will present you how to setup a successful and efficient Git workflow powered by the modern, excellent open source softwa]]>
    </summary>
    
      <category term="git" scheme="http://blog.yubeiluo.me/categories/git/"/>
    
      <category term="gitlab" scheme="http://blog.yubeiluo.me/categories/git/gitlab/"/>
    
      <category term="continuous integration" scheme="http://blog.yubeiluo.me/categories/git/gitlab/continuous-integration/"/>
    
      <category term="continuous delivery" scheme="http://blog.yubeiluo.me/categories/git/gitlab/continuous-integration/continuous-delivery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lessons-Learned-Transition-to-Frontend]]></title>
    <link href="http://blog.yubeiluo.me/2015/08/14/Lessons-Learned-Transition-to-Frontend/"/>
    <id>http://blog.yubeiluo.me/2015/08/14/Lessons-Learned-Transition-to-Frontend/</id>
    <published>2015-08-14T12:09:15.000Z</published>
    <updated>2015-08-14T14:18:41.000Z</updated>
    <content type="html"><![CDATA[<p>It’s been almost a quarter since I joined the new team. For the recent month, all the efforts have been spent on the <strong>Mini ERP Project</strong> aiming to integrate internal workflows for increasing efficiency and boosting productivity. Proudly speaking, I have now transitioned to be a proficient front-end engineer within such a short period of time, so it is worth spending some more time in recording and more importantly summarizing the lessons learned in this unforgettable and challenging transition process.</p>
<h1 id="Facts_&amp;_Lessons">Facts &amp; Lessons</h1><ol>
<li><p>The first project is an existing one, developed by a seasoned front-end veteran, who was going to leave the team soon. The project was written in the <strong>MEAN</strong> stack using grunt as the build tool and helped enlighten me in various aspects of front-end engineering with enormous amount of working examples. The only cumbersome issue was that each time a new dependency was introduced, you had to manually wire them up in the main page, which obviously violates the <a href="https://en.wikipedia.org/wiki/Open/closed_principle" target="_blank" rel="external">OCP principle</a>. BTW, Java is my favorite programming language and I am obsessed with software design principles and practices with over 4 years experience of server side engineering, 1 year hands-on architectural experience.</p>
</li>
<li><p>As was told by many friends, Angular indeed has a very steep learning curve compared to other frameworks and it took me no less than two weeks before the angular way of thinking came into being in my mentality. However, once you get used to it, the previous pains totally paid off because you now have a damn powerful weapon added to your arsenal, which could help to solve many intricate problems in many cases with less code written. The core angular concepts are:</p>
<ul>
<li>Two-way data binding</li>
<li>Dependency injection,</li>
<li>Controllers</li>
<li>Services</li>
<li>Service providers</li>
<li>Scope and scope inheritance</li>
<li>Filters</li>
</ul>
<p>It is worth pointing out that you can not claim to be an Angular artisan unless you comprehend the inner workings of the directives and are capable of rolling out customized ones to suite your own use case.</p>
</li>
<li><p>GulpJs is a better build tool compared to GruntJs because of the following two reasons:</p>
<ul>
<li>It favors the concept of “coding over configuration”, which makes the code feel more explicit and readable, thus much easier for you to figure out what is going on.</li>
<li>It out-performs GruntJs by working in a streaming manner just like Unix pipes. In GulpJs, almost everything is performed in memory and no intermediary file storage is required, thus saving tremendous amount of disk-io related time.</li>
</ul>
</li>
<li><p><a href="https://github.com/Swiip/generator-gulp-angular" target="_blank" rel="external">Angular+GulpJs generator</a> is awesome in that you do not feel the hassle of wiring up dependencies manually in the main page any more since they are sorted out by the <a href="https://github.com/klei/gulp-angular-filesort" target="_blank" rel="external">angular-file-sort plugin</a>.</p>
</li>
<li><p>You should start way much earlier to experiment and prototype before the backend team kicks off and definitely do not wait until the backend API is ready. Nodejs + express could be leveraged to mock the real api and provide some fake data in order to make the whole workflow run.</p>
</li>
<li><p>Usability is important and you should always think from the perspective of the end users and make bold suggestions when necessary. Take the below comparison as an example:</p>
<ul>
<li><p>The origin detail page design</p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-5.png" alt=""></p>
</li>
<li><p>The proposed design</p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-4.png" alt=""></p>
<p>As you can see, since the detail page is very lengthy, it will be very handy for an left-side navigation bar to be present when users are scrolling around.</p>
</li>
</ul>
</li>
<li><p>You should have a consistent error handling process in place to make troubleshooting a straightforward and time-saving task when something goes wrong.</p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-6.png" alt=""></p>
</li>
</ol>
<h1 id="Finished_Product">Finished Product</h1><p>Although the product is far from being perfect, I still would like to show off some highlights.</p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-4.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-7.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-8.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-9.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-10.png" alt=""></p>
<p><img src="/uploads/Lessons-Learned-Transition-to-Frontend/screenshot-11.png" alt=""></p>
<h1 id="Conclusion">Conclusion</h1><p>It will be great if this long post will be of any use for other backend engineers who also feel tempted to give it a shot in the front-end arena.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It’s been almost a quarter since I joined the new team. For the recent month, all the efforts have been spent on the <strong>Mini ERP Pro]]>
    </summary>
    
      <category term="nodejs" scheme="http://blog.yubeiluo.me/categories/nodejs/"/>
    
      <category term="angular" scheme="http://blog.yubeiluo.me/categories/nodejs/angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use Css After Psuedo Element To Center Play Icon]]></title>
    <link href="http://blog.yubeiluo.me/2015/07/08/Use-Css-After-Psuedo-Element-To-Center-Play-Icon/"/>
    <id>http://blog.yubeiluo.me/2015/07/08/Use-Css-After-Psuedo-Element-To-Center-Play-Icon/</id>
    <published>2015-07-08T08:58:58.000Z</published>
    <updated>2015-07-08T11:00:29.000Z</updated>
    <content type="html"><![CDATA[<p>Today, I would like to share with you some css tricks that were discovered and learned in my own project, where they were employed to place a play icon in the middle of an image.</p>
<h1 id="Background">Background</h1><p>During my recent development of a web ui for managing the post library (user can see the list and perform actions on each of them), it is needed to render the UI based on the post type. For the post with attached video, it is required to display the <strong>play</strong> icon in the center of the video snapshot image that could be simply clicked by the user to play the video.</p>
<h1 id="Desired_Effect">Desired Effect</h1><p>One picture is worth than thousands words and here comes the snapshot.</p>
<p><img src="/uploads/Use-Css-After-Psuedo-Element-To-Center-Play-Icon/snapshot-1.png" alt=""></p>
<h1 id="Tricky_Things">Tricky Things</h1><p>In order to achieve the wanted functionality, it was not an easy task for me since I just re-picked up the web tech stack two months ago due to lack of labor and lots of stuff has changed dramatically.</p>
<p>The most unpleasant issue I feel with front-end development is the enormous details that one has to take care of, such as the gigantic css rules. And it is very likely to forget the technique that was previously used.</p>
<p>Next, I will talk about the facts and findings that were learned.</p>
<h2 id="CSS_Positions">CSS Positions</h2><p>There are four possible values for the css <strong>position</strong> property per the below table.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">static</td>
<td>the default value</td>
</tr>
<tr>
<td style="text-align:left">relative</td>
<td>relative to the original position and will stay in the normal document structure</td>
</tr>
<tr>
<td style="text-align:left">absolute</td>
<td>relative to the first positioned parent element and will be removed from the document structure</td>
</tr>
<tr>
<td style="text-align:left">fixed</td>
<td>relative to the viewport and will stay in the normal document structure</td>
</tr>
</tbody>
</table>
<p>Please be noted that when positioned as absolute, the following statements hold true:</p>
<ol>
<li><p>The element will become an inline-block element and its width and height will auto-adjust to the contained elements.</p>
</li>
<li><p>The parent element will not any reserve space for it and therefore overlapping could occur.</p>
</li>
<li><p>The element will be positioned relative to the first positioned parent element that has the position property set to a value other than <strong>static</strong></p>
</li>
</ol>
<h2 id="Pseudo_Elements">Pseudo Elements</h2><p>What the hell are them? You may wonder the same as I did the first time when I heard the words. Actually, they are basically css rules like <strong>a:after,a:before</strong> that can 1) add more flexibility than plain javascript 2) remove unnecessary html code. Here are some facts to bear in mind.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">a</span>:<span class="value">before&#123;</span><br><span class="line">  display: block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"><span class="string">"the content will be inserted before the a's content"</span></span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>They do not appear in the DOM and are rendered by the css renderer. Henceforth, it is not possible to manipulate them via javascript.</p>
</li>
<li><p>The content property <strong>CAN NOT</strong> be missing.</p>
</li>
<li><p>The default display value is inline and can be modified to suit your needs.</p>
</li>
</ol>
<h1 id="The_Solution">The Solution</h1><p>Okay, it is time to put all the pieces together to have the whole picture.</p>
<p>First, the html markup:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"my-video-content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">ng-src</span>=<span class="value">"&#123;&#123;feed.video.thumbnailUrl&#125;&#125;"</span> <span class="attribute">alt</span>=<span class="value">""</span> <span class="attribute">class</span>=<span class="value">"img-thumbnail"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">ng-click</span>=<span class="value">"playVideo(feed)"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Secondly, the css styles:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.my-video-content</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.my-video-content</span> <span class="rule"><span class="attribute">a</span>:<span class="value">after &#123;</span><br><span class="line">	font-family: <span class="string">"Glyphicons Halflings"</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-webkit-font-smoothing</span>:<span class="value"> antialiased</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">"\e029"</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin</span>:<span class="value"> -<span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">20px</span></span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Explanation">Explanation</h2><ol>
<li><p>The dimension of the video snapshot image is dynamic, so we need to have a container to have its width auto-adjust to that of the enclosed image. By default, the width of a div container will flow to 100% of its parent’s width and that is exactly where <strong>display=inline-block</strong> came to the rescue.</p>
</li>
<li><p>The <strong>.my-video-content a:after</strong> element is now positioned relative to the <strong>.my-video-content</strong> container and we also need to set both the top and left to 50% so that the left corner of the icon box is sitting in the middle of the image.</p>
</li>
<li><p>The goal is to center the icon box not the left corner, so we need to offset both the top and left margin to half of the icon’s height and width.</p>
</li>
</ol>
<h1 id="Conclusion">Conclusion</h1><p>Hopefully, the above tips could come to help and inspire your own development and please do not hesitate to correct me if anything I wrote above is wrong.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Today, I would like to share with you some css tricks that were discovered and learned in my own project, where they were employed to pla]]>
    </summary>
    
      <category term="css" scheme="http://blog.yubeiluo.me/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Winston Rolling File Appender]]></title>
    <link href="http://blog.yubeiluo.me/2015/06/29/Winston-Rolling-File-Appender/"/>
    <id>http://blog.yubeiluo.me/2015/06/29/Winston-Rolling-File-Appender/</id>
    <published>2015-06-29T08:36:02.000Z</published>
    <updated>2015-06-30T09:51:10.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/winstonjs/winston" target="_blank" rel="external">Winston</a> is a great library for asynchronous logging in nodejs applications. It has the wonderful abstraction of transport where log messages will be delivered to and several built-in transports are provided out of the box per the below table (the list is incomplete).</p>
<table>
<thead>
<tr>
<th style="text-align:left">Transport Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Console</td>
<td>Log the messages in the console</td>
</tr>
<tr>
<td style="text-align:left">File</td>
<td>Log the messages in a file such as <strong>app.log</strong></td>
</tr>
<tr>
<td style="text-align:left">DailyRotateFile</td>
<td>Log the message in a file that rotates bases upon rules like the capped file size, date pattern</td>
</tr>
</tbody>
</table>
<p>For a production setup, you will find the <strong>DailyRotateFile</strong> transport useful since it could rotate your log files automatically based on the rules which are configurable.</p>
<h2 id="Problems">Problems</h2><p>If you follow the instructions outlined in the official winston repo, it is very likely that you will feel as surprised as I do. To summarize, here is a list of issues that make me feel uncomfortable sorted by the level from the most serious to the least.</p>
<h3 id="Message_Loss">Message Loss</h3><p>Yes!! You hear me, some messages will fail to be delivered to the log file. This is what exactly happened to my environment, where there are two transports configured, one is the <strong>Console</strong> and the other is the <strong>DailyRotateFile</strong>. After the app bootstraps, by comparing the messages between the console and the file, it is observed that some message will become lost in the file. Since logging is such as vital part of an application, how could you endure and afford the consequences of any message losses?</p>
<h3 id="Not_Tailer_Friendly">Not Tailer Friendly</h3><p>I admit that it is the OCD that helps to forge a habit that every time before an app is run, I will open another terminal to tail the app log file to see if everything goes on smoothly as expected and this command is often an alias defined in the bash profile such as</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> app.log=tail <span class="operator">-f</span> <span class="variable">$APP_HOME</span>/logs/app.log</span><br></pre></td></tr></table></figure>
<p>But when using the <strong>DailyRotateFile</strong> transport, the file name is dynamic according to the configured rules. The default value is the configured file name plus the current date suffix in the <strong>yyyy-mm-dd</strong> format like <strong>app.2015-06-29.log</strong>.</p>
<p>The problem with this is that there is no way to define a permanent alias to tail the log file since the file name changes and it would be handy if the transport could produce a file that never changes its name but still contains the latest log messages.</p>
<p>What about a symbolic link file that always links to the up-to-date log file and changes as well when the underlying file changes?</p>
<h2 id="Solution">Solution</h2><p>After reading the source code of winston, I have decided to fork the <a href="https://github.com/mallocator/Winston-Rolling-File-Appender" target="_blank" rel="external">Winston-Rolling-File-Appender</a> and roll out my own version of <strong>DailyRotateFile</strong> transport. Please go to <a href="https://github.com/yubeiluo/Winston-Rolling-File-Appender" target="_blank" rel="external">Another-Winston-Rolling-File-Appender</a> for furthur details about this little tranport that makes my life eaiser. Hopefully it could help you as well if by any chance you are suffering from the same issues.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/winstonjs/winston" target="_blank" rel="external">Winston</a> is a great library for asynchronous logging in ]]>
    </summary>
    
      <category term="nodejs" scheme="http://blog.yubeiluo.me/tags/nodejs/"/>
    
      <category term="winston" scheme="http://blog.yubeiluo.me/tags/winston/"/>
    
      <category term="nodejs" scheme="http://blog.yubeiluo.me/categories/nodejs/"/>
    
  </entry>
  
</feed>